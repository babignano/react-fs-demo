{"version":3,"sources":["reducers/userReducer.tsx","reducers/index.tsx","reducers/tasksReducer.tsx","firebase.tsx","services/auth.service.tsx","components/auth/signin/signin.tsx","actions/actions.tsx","components/user/user.tsx","components/task/task.tsx","components/tasks/tasks.tsx","components/shared/header/header.tsx","components/app/app.tsx","store.tsx","serviceWorker.tsx","index.tsx"],"names":["combineReducers","tasks","user","state","action","type","Object","assign","payload","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","React","createContext","Auth","auth","doCreateUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","then","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","getUser","app","initializeApp","config","this","INITIAL_STATE","error","isLoggedIn","SignIn","props","Consumer","signInSuccess","Component","SignUpForm","handleChange","event","target","name","setState","value","handleSubmit","preventDefault","result","catch","to","onSubmit","onChange","message","connect","undefined","dispatch","SignInSuccess","User","Task","ListItem","ListItemText","primary","title","secondary","description","Tasks","useQuery","gql","loading","data","List","map","id","key","useStyles","makeStyles","theme","flexGrow","link","color","textDecoration","classes","AppBar","position","Toolbar","Typography","variant","className","Button","IconButton","aria-label","aria-controls","aria-haspopup","get","client","ApolloClient","uri","App","store","createStore","rootReducer","applyMiddleware","thunk","Provider","Container","maxWidth","from","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9178b60d.chunk.js","sourcesContent":["export default (state = {}, action) => {\n    switch (action.type) {\n        case 'SIGNIN_SUCCESS':\n            return Object.assign({}, state, {\n                ...action.payload\n            });\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux';\n\nimport tasksReducer from './tasksReducer';\nimport userReducer from './userReducer';\n\nexport default combineReducers({\n    tasks: tasksReducer,\n    user: userReducer\n});\n","export default (state = {}, action) => {\n    return {\n        user: null,\n        tasks: []\n    }\n}\n","export default {\n    apiKey: \"AIzaSyCVw_JESly7u__LN_3qCVq5P2VKzlMeKF4\",\n    authDomain: \"react-fs-demo.firebaseapp.com\",\n    databaseURL: \"https://react-fs-demo.firebaseio.com\",\n    projectId: \"react-fs-demo\",\n    storageBucket: \"react-fs-demo.appspot.com\",\n    messagingSenderId: \"599248273573\",\n    appId: \"1:599248273573:web:0131db8bed6e665a540d4c\"\n};","import app from 'firebase/app';\nimport 'firebase/auth';\nimport React from 'react';\nimport config from '../firebase';\n\nexport const AuthContext = React.createContext(null);\n\nexport class Auth {\n    auth: app.auth.Auth;\n\n    constructor() {\n        app.initializeApp(config);\n        this.auth = app.auth();\n    }\n\n    // *** Auth API ***\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password).then()\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n\n    getUser = () => this.auth.currentUser;\n}\n","import React from 'react';\nimport { AuthContext } from '../../../services/auth.service';\nimport { SignInSuccess } from '../../../actions/actions';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom'\nimport cookie from 'react-cookies'\n\n\nconst INITIAL_STATE = {\n    email: '',\n    password: '',\n    error: null,\n    isLoggedIn: false\n};\n\nexport interface SignUpFormInputProps {\n    auth: any;\n    signInSuccess: any;\n}\n\nexport interface SignInInputProps {\n    signInSuccess: any;\n}\n\nexport interface SignUpFormState {\n    email: string;\n    password: string;\n    error: Error;\n    isLoggedIn: boolean;\n}\n\nclass SignIn extends React.Component<SignInInputProps> {\n    constructor(props) {\n        super(props);\n    }\n     \n    render() {\n        return (\n            <AuthContext.Consumer>\n                {auth => (<SignUpForm auth={auth} signInSuccess={this.props.signInSuccess} />)\n                }\n            </AuthContext.Consumer>\n        )\n    }\n}\n\nclass SignUpForm extends React.Component<SignUpFormInputProps, SignUpFormState> {\n    constructor(props) {\n        super(props);\n        this.state = { ...INITIAL_STATE }\n    }\n    handleChange = event => {\n        switch(event.target.name) {\n            case 'email':\n                this.setState({ email: event.target.value });\n            case 'password':\n                this.setState({ password: event.target.value });\n        }\n      }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        const { email, password } = this.state;\n        this.props.auth\n            .doSignInWithEmailAndPassword(email, password)\n            .then(result => {\n                this.props.signInSuccess(result.user);\n                this.setState({\n                    isLoggedIn: true\n                });\n            })\n            .catch(error => {\n                this.setState({ error });\n            });  \n    }\n\n    render() {\n        const { email, password, error, isLoggedIn } = this.state;\n\n        if (isLoggedIn) {\n            return <Redirect to='/tasks' />;\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label>Email:\n                    <input name=\"email\" type=\"email\" value={email} onChange={this.handleChange} />\n                </label>\n                <label>Password:\n                    <input name=\"password\" type=\"Password\" value={password} onChange={this.handleChange} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n                {error && <p> {error.message} </p>}\n            </form>\n           \n        )\n    }\n}\nconst mapDispatchToProps = dispatch => ({\n    signInSuccess: user => dispatch(SignInSuccess(user))\n})\n   \nexport default connect(undefined, mapDispatchToProps)(SignIn)","export const SignInSuccess = (user) => dispatch => {\n    dispatch({\n      type: 'SIGNIN_SUCCESS',\n      payload: user\n    })\n}","import React from 'react';\n\nclass User extends React.Component {\n  render() {\n    return <h1>User</h1>\n  }\n}\n\nexport default User","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nfunction Task(props) {\n    return <ListItem>\n        <ListItemText primary={props.title} secondary={props.description} />\n    </ListItem>\n}\n\nexport default Task","import React from 'react';\nimport Task from '../task/task'\nimport List from '@material-ui/core/List';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nfunction Tasks(props) {\n\n    const { loading, error, data } = useQuery(gql`\n        {\n            tasks {\n                id,\n                title,\n                description\n            }\n        }\n    `);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    return (\n        <List>\n            { data.tasks.map(({ id, title, description }) =>\n                <Task key={id} id={id} title={title} description={description} />)\n            }\n        </List>\n    );\n\n}\n\nexport default Tasks","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { get } from 'lodash';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        flexGrow: 1,\n    },\n    link: {\n        color: 'white',\n        textDecoration: 'none'\n    }\n  }));\n\nfunction Header(props) {\n    const classes = useStyles(props);\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    <Link to=\"/tasks\" className={classes.link}>My Tasks</Link>\n                </Typography>\n                <Button color=\"inherit\">\n                    <Link to=\"/signout\" className={classes.link}>Sign Out</Link>\n                </Button>\n                <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"menu-appbar\"\n                    aria-haspopup=\"true\"\n                    color=\"inherit\"\n                >\n                    <Link to=\"/user\" className={classes.link}>\n                        {get(props, 'user.email')}\n                        <AccountCircle />\n                    </Link>\n                </IconButton>\n            </Toolbar>\n        </AppBar>)\n}\n\nconst mapStateToProps = state => {\n    return {\n        user: state.user\n    }\n}\n\nexport default connect(mapStateToProps)(Header);","import React from 'react';\nimport { Route, Redirect, BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from '../../store';\n\nimport { Auth, AuthContext } from '../../services/auth.service';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport Container from '@material-ui/core/Container';\n\nimport SignIn from '../auth/signin/signin';\nimport User from '../user/user';\nimport Tasks from '../tasks/tasks';\nimport Header from '../shared/header/header';\n\nimport './app.scss';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n});\n\nfunction App() {\n  return (\n    <Provider store={configureStore()}>\n      <AuthContext.Provider value={new Auth()}>\n       <ApolloProvider client={client}>\n        <Router>\n          <Header />\n          <Container maxWidth=\"sm\">\n            <div>\n              <Redirect from=\"/\" exact to=\"/tasks\" />\n              <Route path=\"/signin\" component={SignIn} />\n              <Route path=\"/user\" component={User} />\n              <Route path=\"/tasks/:id?\" component={Tasks} />\n            </div>\n          </Container>\n        </Router>\n        </ApolloProvider>\n      </AuthContext.Provider>\n    </Provider>\n  );\n}\n\nexport default App\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nexport default function configureStore() {\n    return createStore(\n        rootReducer,\n        applyMiddleware(thunk)\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}